This code is based off of Fabrice Bellard's TinyGL 0.4 (c) 1997-2002.

The significant design change intended here is to replace the OpenGL style
global context with a buffer target that is passed among functions.  The
intent is not to be a drop-in OpenGL replacement, but to allow code written
in a similar fashion.

Rather than providing a large feature set, the idea is to adapt this code to
produce a minimal set of 3D visuals (wireframes, basic shaded triangles) in a
portable way that allows them to be produced and used in as many environments
as possible.  Accordingly, the intent is not to attempt to duplicate similar
work in Mesa3D to create modern, high-performance OpenGL-style pipelines but
rather to keep a basic, simple API that allows for simple visualization of 3D
data.  The particular use case motivating this effort is to provide a
last-resort fallback if the system's graphics accelerated contexts aren't usable
for some reason.

Rather than taking cognizance of multiple rendering output types at the library
level, we will assume a basic RGBA buffer and make it the responsibility of the
displaying environment to re-interpret that data (if it needs to).
Conceptually, the job of swrast is simply to produce a basic image of the scene
- display or saving of the image data is the responsibility of the caller.
